package com.zkbl.toutiaojava.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zkbl.toutiaojava.greenDaoBean.Good;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOOD".
*/
public class GoodDao extends AbstractDao<Good, Void> {

    public static final String TABLENAME = "GOOD";

    /**
     * Properties of entity Good.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CommonName = new Property(2, String.class, "commonName", false, "COMMON_NAME");
        public final static Property TradeName = new Property(3, String.class, "tradeName", false, "TRADE_NAME");
        public final static Property Code = new Property(4, String.class, "code", false, "CODE");
        public final static Property Spec = new Property(5, String.class, "spec", false, "SPEC");
        public final static Property Price = new Property(6, String.class, "price", false, "PRICE");
        public final static Property Unit = new Property(7, String.class, "unit", false, "UNIT");
        public final static Property SupplierId = new Property(8, String.class, "supplierId", false, "SUPPLIER_ID");
        public final static Property ManufacturerId = new Property(9, String.class, "manufacturerId", false, "MANUFACTURER_ID");
        public final static Property Implant = new Property(10, String.class, "implant", false, "IMPLANT");
        public final static Property Enable = new Property(11, String.class, "enable", false, "ENABLE");
        public final static Property CreateUserId = new Property(12, String.class, "createUserId", false, "CREATE_USER_ID");
        public final static Property CreateDate = new Property(13, String.class, "createDate", false, "CREATE_DATE");
        public final static Property ModifyUserId = new Property(14, String.class, "modifyUserId", false, "MODIFY_USER_ID");
        public final static Property ModifyDate = new Property(15, String.class, "modifyDate", false, "MODIFY_DATE");
    }


    public GoodDao(DaoConfig config) {
        super(config);
    }
    
    public GoodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOOD\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"COMMON_NAME\" TEXT," + // 2: commonName
                "\"TRADE_NAME\" TEXT," + // 3: tradeName
                "\"CODE\" TEXT," + // 4: code
                "\"SPEC\" TEXT," + // 5: spec
                "\"PRICE\" TEXT," + // 6: price
                "\"UNIT\" TEXT," + // 7: unit
                "\"SUPPLIER_ID\" TEXT," + // 8: supplierId
                "\"MANUFACTURER_ID\" TEXT," + // 9: manufacturerId
                "\"IMPLANT\" TEXT," + // 10: implant
                "\"ENABLE\" TEXT," + // 11: enable
                "\"CREATE_USER_ID\" TEXT," + // 12: createUserId
                "\"CREATE_DATE\" TEXT," + // 13: createDate
                "\"MODIFY_USER_ID\" TEXT," + // 14: modifyUserId
                "\"MODIFY_DATE\" TEXT);"); // 15: modifyDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOOD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Good entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String commonName = entity.getCommonName();
        if (commonName != null) {
            stmt.bindString(3, commonName);
        }
 
        String tradeName = entity.getTradeName();
        if (tradeName != null) {
            stmt.bindString(4, tradeName);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
 
        String spec = entity.getSpec();
        if (spec != null) {
            stmt.bindString(6, spec);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(7, price);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(8, unit);
        }
 
        String supplierId = entity.getSupplierId();
        if (supplierId != null) {
            stmt.bindString(9, supplierId);
        }
 
        String manufacturerId = entity.getManufacturerId();
        if (manufacturerId != null) {
            stmt.bindString(10, manufacturerId);
        }
 
        String implant = entity.getImplant();
        if (implant != null) {
            stmt.bindString(11, implant);
        }
 
        String enable = entity.getEnable();
        if (enable != null) {
            stmt.bindString(12, enable);
        }
 
        String createUserId = entity.getCreateUserId();
        if (createUserId != null) {
            stmt.bindString(13, createUserId);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(14, createDate);
        }
 
        String modifyUserId = entity.getModifyUserId();
        if (modifyUserId != null) {
            stmt.bindString(15, modifyUserId);
        }
 
        String modifyDate = entity.getModifyDate();
        if (modifyDate != null) {
            stmt.bindString(16, modifyDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Good entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String commonName = entity.getCommonName();
        if (commonName != null) {
            stmt.bindString(3, commonName);
        }
 
        String tradeName = entity.getTradeName();
        if (tradeName != null) {
            stmt.bindString(4, tradeName);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
 
        String spec = entity.getSpec();
        if (spec != null) {
            stmt.bindString(6, spec);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(7, price);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(8, unit);
        }
 
        String supplierId = entity.getSupplierId();
        if (supplierId != null) {
            stmt.bindString(9, supplierId);
        }
 
        String manufacturerId = entity.getManufacturerId();
        if (manufacturerId != null) {
            stmt.bindString(10, manufacturerId);
        }
 
        String implant = entity.getImplant();
        if (implant != null) {
            stmt.bindString(11, implant);
        }
 
        String enable = entity.getEnable();
        if (enable != null) {
            stmt.bindString(12, enable);
        }
 
        String createUserId = entity.getCreateUserId();
        if (createUserId != null) {
            stmt.bindString(13, createUserId);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(14, createDate);
        }
 
        String modifyUserId = entity.getModifyUserId();
        if (modifyUserId != null) {
            stmt.bindString(15, modifyUserId);
        }
 
        String modifyDate = entity.getModifyDate();
        if (modifyDate != null) {
            stmt.bindString(16, modifyDate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Good readEntity(Cursor cursor, int offset) {
        Good entity = new Good( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // commonName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tradeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // spec
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // unit
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // supplierId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // manufacturerId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // implant
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // enable
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // createUserId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createDate
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // modifyUserId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // modifyDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Good entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCommonName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTradeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSpec(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUnit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSupplierId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setManufacturerId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImplant(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEnable(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreateUserId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCreateDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setModifyUserId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setModifyDate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Good entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Good entity) {
        return null;
    }

    @Override
    public boolean hasKey(Good entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
